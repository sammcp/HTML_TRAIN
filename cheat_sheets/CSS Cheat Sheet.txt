CSS Cheat Sheet

**-----------------------------------------how to add CSS to HTML:

Inline - by using the style attribute inside HTML elements (used for a single element) (BAD) (also, over rides everything)
Internal - by using a <style> element in the <head> section (used to style a single HTML page) for example 
<head>
    <style>
    body {background-color: powderblue;}
    h1   {color: blue;}
    p    {color: red;}
    </style>
</head>
External - by using a <link> element to link to an external CSS file (far better)

**-----------------------------------------------------------------------------------------------
CSS Syntax

selector{
    property1:value;
    propert2:value;
}

**Selectors--------------------------------------------------------------------------------------
Element - select all HTML elements of a certain type, i.e. all h1 elements h1{}
Class - select all HTML elements of a certain class (defined as a HTML attribute in the element) i.e. <h1 class = "headers">, uses a dot .headers{}
ID - select a specific HTML element with an Id, Ids are uniqie to HTML elements i.e. <h1 id="squirtle heading"> no other HTML element will have an id of "squirtle heading" uses a # #squirtle_heading{}
combining Selectors
Attribute - select HTML elements according to a specific attribute value a[href="florence"]{} selects all <a> tags with the attribute href with "florence" somewhere in it
for example <a href="https://visitflorence.it">

--> specifying multipe selectors for the element to be styled, there can be no space between the two selectors

 selector-1.selector-2{}
e.g. 
h1.large-header{}selects all elements that are the h1 element and have the class "large-header"

--> CSS Ancestor selectors with the syntax: there must be a space between the ancestor and child selectors
.ancestor .child{}
e.g.
div p {} selects all p elements that have a div as an ancestor (even if the div tag is not the direct ancestor of p)

-->you can also combine selectors to give multiple selectors the same property. For example if you have the classes big and large you can:
.big, .large{} applies the style to all elements with the big class and all elements with the large class

-->These can all be combined for example: 
header.main-header h1.brown, .large{} selects all h1 elements with class brown that have a header with class main-header as an ancestor AND all elements with the large class

--> you can also use the * selector to select everything on the entire page e.g. *{}

**----------------------------------------------------------------------------------------------
Overwriting Styles

when there are conflicting styles for an element the style is chosen via a hierarchy of selectors
the lowest is: element, then class then id. id will overwrite anything. 

if a selector is a combined selector then it is chosen via the following method: 
->whichever has the most #id selectors (if the same number then:)
->whichever has the most .class selectors (if the same number then:)
->whichever has the most element selectors. (if the same number then:)
->whichever is lowest on the CSS sheet

in the case where there are two of the same selectors the element will be styled with whatever style is set last in the CSS file, for example: 
h1{
    color: blue;
}
h1{
    color:red;
}
would mean all h1 elements are coloured blue

**inheritence---------------------------------------------------------------------------------
where possible children will inherit the properties of it's ancestors. for example if 
div{
  color:red;
}
and
<div><p>this text is red</p></div>
the text will be red as the <p> element inherits the red property from <div>

**setting colors-------------------------------------------------------------------
you can use three different types of color setting
rgb/a - red, green, blue, alpha rgba(255,255,0,.5) alpha being the transparancy of the colour
hex code - set the color to a specific hex code
hsl/a - hue(between 0 and 360 and determines color), saturation (colorfull-ness), lightness (100% is white, 0% is black), alpha (transparancy), hsla(0, 100%, 50%, 0.5)

colours can be used to set colour for 
color: the color of the object 
background-color: the color of the background of the object 
**The DOM tree-----------------------------------------------------------------------------
Document Object Model - is a cross platform, language independent interface that treats an XML or HTML document as a tree structure

each HTML element is an object in the structure, with the root node being the document and then splitting into head and body 
and then further 

for example a <div> element in the body would be a node below the body

**The box model--------------------------------------------------------------------
The box model is how HTML elements are displayed, they consist of four layers, with the content in the centre and the margin at the end 
Content - The content of the box, where text and images etc appear
Padding - Clears an area around the content. The padding takes on the background colour 
Border - A border that goes around the padding and content
Margin - Clears an area outside the border. The margin is transparent

the total size a HTML element takes up is equal to the combined amount of all four sizes for example the content might width:200px 

**Alternative box model-------------------------------------------------------------
by default the model used by web browsers to render content is as above. However, there are other options 
the box-sizing property changes how the browser renders content, 

the default (as described above is "content-box")

an alternative is border-box. 
the border-box model works in the opposite way as the content-box model. The total size of an element remains fixed.
for example, if the height and width are 300px and the padding is 10px, the padding is part of the 300px. It remains within the total size.

to set this you can use the *{} selector e.g.
*{
  boz-sizing:border-box;
}

**Pseudo Classes--------------------------------------------------------------------------------
a pseudo class can be attached to any selector, it is written as 

selector:pseudo_class

pseduo classes can be used to define a special state of an element for example: 
Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus

e.g. the hover pseudo class, defines what happens when a user hovers over an element with their mouses
a:hover{
  color:blue
}

will make any <a> elements turn blue when hovered over 

}

**!important-------------------------------------------------------------------------------------

the !important keyword can be applied to specific declarations only (i.e. color:blue; not entire rules i.e. h1{})
to overwrite any styling 

it should be used sparingly 

h1{
  color:blue !important;
  font-family:arial;
}

in this example all h1 elements will be colored blue no matter what

**Borders----------------------------------------------------------------------------------------

borders around elements have the following properties: 

width - (set in pixels or using keywords thin, medium or thick)
style - (from 10 different styles e.g. none, dotted, solid)
color - change the color
border radius - changes the look of the border i.e. give it rounded edges the value is given as a percentage or in pixels 
it sets the borders to a circle with a radius of X% or Xpx. to make a perfect circle set it to 50% or half the width (radius)

for example 
h1{
  border: dotted 1px red;
  border-radius:10%;
}

adds a 1 pixel thick red dotted bordera around all h1 elements 

**Padding----------------------------------------------------------------------------------------
The space between the contents of a box and it's borders. Padding can be applied to all sides or to one specific side using: 
padding:
padding-top:
padding-bottom:
padding-left:

padding shorthand - padding shorthand allows you to specify the above properties using just one line 

padding: 10px 15px 10px 15px;
the first entry is always the top with the other entries going clockwise (right, bottom, left)
this works with less entries 
3 entries: first one is top, second is left and right padding, last one is bottom padding 
2 entries: first one is top and bottom, second is left and right

**Margin----------------------------------------------------------------------------------------
the margin refers to the space outside the box (i.e. outside the border), the margin property is used to set this 
you can use: 
margin (sets all sides equally)
or margin-top
margin-bottom
margin-left
margin-right

margin has the same shorthand properties as padding

centering content.

the margin property will also allow you to centre content 

for example: 
margin:0 auto; will center the element in their containing elements.

it sets the top and bottom margins to 0 and the left right margins to whatever they need to be to center the element

the auto informs the browser to adjust the left and right margins until the element is centered in it's containing element.

in order to center an element, a width must be set for that element. otherwise the element will be set to the full width of the containing element 

it is impossible to center an element that takes up the full width of the pade since the width of the page can change.

**margin collapse-----------------------------------------------------------------
horizontal margines do not collapse. I.e. the distance between two element's borders next to each other (left/right) iss the margin of both added together 

wheras vertical(up/down) margines collapse, only the larger of the two vertical margins sets the distance between them

**height/width limits----------------------------------------------------------------

due to screen sizes it may be wise to limit the minimum and maximum width of elements

min-width—this: minimum width of an element’s box
max-width—this: maximum width of an element’s box

min-height — minimum height for an element’s box.
max-height — maximum height of an element’s box.

if the max/min properties are set too low elements can spill off screen and/or become illegible
if the max/min properties are set too high then elements can become tiny in comparison to the screen

going over/under the maximum pixel count will not dissapear the content but make it so that the size doesn't scale 
anymore with the page, normally the width/height will go larger/smaller to accomodate the screen size.

**The Overflow Property---------------------------------------------------------------
THe overflow property controls what happens to content that spills or overflows outside it's box

common properties:
hidden - content that overflows will be hidden from view 
scroll - a scrollbar will be added to the element's box so that the result can still be viewed 
visible - the overflow content will be displayed outside of the containing element - (default)
used like so 
p{
  overflow:scroll;
}

**resetting defaults------------------------------------------------------------------
all major web browsers have a default style sheet they use in the absence of an external style sheet known as user agent style sheets.

many developers therefore choose to reset these default values so they can work with a clean slate 
e.g. 
*{
  margin:0;
  padding:0;
}

**visibility-------------------------------------------------------------------------
elements can be hidden from view with the visibility property
it can be set to: 
hidden- hides an element (not visible but a space is still reserved)
visible - displays 
collapse - collapses an element (no space and not visible)

note when using hidden: the web page will only hide the element but will not remove the space reserved for it so there 
will be an empty space on the page 

Note the display property can be used to do a similair thing 
display:none; will remove an element from the page and not reserve the space

**FLow of HTML-------------------------------------------------------------------
There are five properties used to adjust the position of HTML elements using CSS
-position
-display-z-index
-float
-clear

**position------------------------------------------------------------------------
the default position of a block-level element is on the far left hand side of the browser, 
the default position can be changed using: 

static - the default value 

--> relative - position the element relative to its default static position on the web page
the relative keyword must be accompanied by some offset properties that will move the element 
away from it's default using, top, bottom, left, right.
{
  position:relative;
  top
  bottomleft
  right
}

the element will be removed from the normal document flow which can cause slipping issues

these offsets will move the element away from the specified position. i.e. top:50px will move 
the element down 50 pixels.


-->  absolute - all other elements on the page will ignore the element. The element will be positioned 
relative to it's closest positioned parent element. Offset properties (as above) can be used to determine 
it's final position from there

-->  fixed  - fix an element to a specific position on the page (regardless of user scrolling)
accompany with the offset properties, often used for navigation bars on a website

the HTML page will not move to accomdate the fixed element. For example content at the top of the page
may be cut off by a header if not formatted properly 

the HTML element will be removed from the normal document flow

--> sticky - the element sticks to a specified position as the user scrolls (stays within the document flow)
used in combination with the offset properties as well.

the element will remain in it's relative position and scroll as usual, when it reaches the specified position using the 
offset i.e. 240pixels from the top, it will then stick to that position (will stay 240 pixels from the top) and will not 
disspear as the user scrolls down (it will stay at 240 pixels from the top)


**z-index-----------------------------------------------
The z-index property controls how far back or how far forward an element should appear on the web page when elements overlap 
deeper elements appear behind shallower elements

the z-index property accepts integer values, depending on their values, the browsers orders them (Or rather renders them)
over or underlapping

the higher the index the more far forward it is, something with an index of 10 will be shown over something with an index over 1

h1{
  z-index:10;
}

**Display property------------------------------------------------------------------------------

the display property changes how elements are located on the screen. If they can be displayed next to each other 
or need their own line or if they can be changed by the CSS height and width properties

the display property may have three values 
in-line
block-level
inline-block

set as: 
h1{
  display:inline-block;
}


the default display for some elements such as <em>, <strong> and <a> is called "inline"
inline elements have a box that wraps tightly aroundtheir content, only taking up as much space as is 
necessary to display their content and not requiring a new line after each element.

the height and width of these elements cannot be specified using css properties

the opposite of inline elements are block-level elements, they are not displayed on the same
line as the content around them and take up the entire width of the page. BY default this includes 
headers,p, div, footer etc.

inline block elements combine aspects of both of the above. they can appear next to each other and we can specify their dimensions 
using the width and height property, images are a good example of these.





**CSS and Tables-----------------------------------------------------------------------------------

CSS and tables 
To add a border, use the CSS border property on table, th, and td elements: 
To avoid having double borders like in the example above, set the CSS border-collapse property to collapse.

table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
  border-color:blue;
}

you can also set the border colour

you can also use the border style property for: 
dotted     
dashed     
solid     
double     
groove     
ridge     
inset     
outset     
none     
hidden 

e.g.
 th, td {
  border-style: dotted;
}

you can also use things like text-allign and padding 

th, td {
  padding: 15px;
  text-align:left;
  border-spacing:4px; //the space between table cells, set to 2 by default
}

**Float--------------------------------------------------------------
moves an element as far right or left as possible 
float:left;
float:right;

when elements float around they can sometimes crash around, the clear property
can describe how they move when bumping into each other
left - the left side of the element will not touch any other element within the same 
containg element
right - same as above but right 
both - neither side of the element will touch any other element within the
same containg element
none - the element can touch either side

**Typography--------------------------------------------------------

set the font using 
h1{
  font-family:'Times New Roman';
}

web safe fonts: 
  web safe fonts are fonts that appear the same across all browsers 

web safe fonts are good to use as fallback fonts 