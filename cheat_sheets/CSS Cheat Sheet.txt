CSS Cheat Sheet

**-----------------------------------------how to add CSS to HTML:

Inline - by using the style attribute inside HTML elements (used for a single element) (BAD) (also, over rides everything)
Internal - by using a <style> element in the <head> section (used to style a single HTML page) for example 
<head>
    <style>
    body {background-color: powderblue;}
    h1   {color: blue;}
    p    {color: red;}
    </style>
</head>
External - by using a <link> element to link to an external CSS file (far better)

**-----------------------------------------------------------------------------------------------
CSS Syntax

selector{
    property1:value;
    propert2:value;
}

**Selectors--------------------------------------------------------------------------------------
Element - select all HTML elements of a certain type, i.e. all h1 elements h1{}
Class - select all HTML elements of a certain class (defined as a HTML attribute in the element) i.e. <h1 class = "headers">, uses a dot .headers{}
ID - select a specific HTML element with an Id, Ids are uniqie to HTML elements i.e. <h1 id="squirtle heading"> no other HTML element will have an id of "squirtle heading" uses a # #squirtle_heading{}
combining Selectors
Attribute - select HTML elements according to a specific attribute value a[href="florence"]{} selects all <a> tags with the attribute href with "florence" somewhere in it
for example <a href="https://visitflorence.it">

--> specifying multipe selectors for the element to be styled, there can be no space between the two selectors

 selector-1.selector-2{}
e.g. 
h1.large-header{}selects all elements that are the h1 element and have the class "large-header"

--> CSS Ancestor selectors with the syntax: there must be a space between the ancestor and child selectors
.ancestor .child{}
e.g.
div p {} selects all p elements that have a div as an ancestor (even if the div tag is not the direct ancestor of p)

-->you can also combine selectors to give multiple selectors the same property. For example if you have the classes big and large you can:
.big, .large{} applies the style to all elements with the big class and all elements with the large class

-->These can all be combined for example: 
header.main-header h1.brown, .large{} selects all h1 elements with class brown that have a header with class main-header as an ancestor AND all elements with the large class

--> you can also use the * selector to select everything on the entire page e.g. *{}

**----------------------------------------------------------------------------------------------
Overwriting Styles

when there are conflicting styles for an element the style is chosen via a hierarchy of selectors
the lowest is: element, then class then id. id will overwrite anything. 

if a selector is a combined selector then it is chosen via the following method: 
->whichever has the most #id selectors (if the same number then:)
->whichever has the most .class selectors (if the same number then:)
->whichever has the most element selectors. (if the same number then:)
->whichever is lowest on the CSS sheet

in the case where there are two of the same selectors the element will be styled with whatever style is set last in the CSS file, for example: 
h1{
    color: blue;
}
h1{
    color:red;
}
would mean all h1 elements are coloured blue

**inheritence---------------------------------------------------------------------------------
where possible children will inherit the properties of it's ancestors. for example if 
div{
  color:red;
}
and
<div><p>this text is red</p></div>
the text will be red as the <p> element inherits the red property from <div>

**setting colors-------------------------------------------------------------------
you can use three different types of color setting
rgb/a - red, green, blue, alpha rgba(255,255,0,.5) alpha being the transparancy of the colour
hex code - set the color to a specific hex code
hsl/a - hue(between 0 and 360 and determines color), saturation (colorfull-ness), lightness (100% is white, 0% is black), alpha (transparancy), hsla(0, 100%, 50%, 0.5)

**The DOM tree-----------------------------------------------------------------------------
Document Object Model - is a cross platform, language independent interface that treats an XML or HTML document as a tree structure

each HTML element is an object in the structure, with the root node being the document and then splitting into head and body 
and then further 

for example a <div> element in the body would be a node below the body

**The box model--------------------------------------------------------------------
The box model is how HTML elements are displayed, they consist of four layers, with the content in the centre and the margin at the end 
Content - The content of the box, where text and images etc appear
Padding - Clears an area around the content. The padding takes on the background colour 
Border - A border that goes around the padding and content
Margin - Clears an area outside the border. The margin is transparent

the total size a HTML element takes up is equal to the combined amount of all four sizes for example the content might width:200px 

**Pseudo Classes--------------------------------------------------------------------------------


**CSS and Tables-----------------------------------------------------------------------------------

CSS and tables 
To add a border, use the CSS border property on table, th, and td elements: 
To avoid having double borders like in the example above, set the CSS border-collapse property to collapse.

table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
  border-color:blue;
}

you can also set the border colour

you can also use the border style property for: 
dotted     
dashed     
solid     
double     
groove     
ridge     
inset     
outset     
none     
hidden 

e.g.
 th, td {
  border-style: dotted;
}

you can also use things like text-allign and padding 

th, td {
  padding: 15px;
  text-align:left;
  border-spacing:4px; //the space between table cells, set to 2 by default
}